#!/bin/bash
# GDW project_name user script for updating/syncing the Drupal dev/test/live environments

# Exit on any error
set -e

# Help text to display on error.
function help {
  echo "
GDW Project Owner Environment Update/Sync Script
Copyright (C) 2013 by Brad Erickson

Usage: gdw [-y] update ENVIRONMENT
  or   gdw [-y] db SOURCE DESTINATION
  or   gdw [-y] files SOURCE DESTINATION
  or   gdw [-y] pull ENVIRONMENT [BRANCH]

Options:
  -y            Assume 'yes' as answer to prompts.

Commands:
  update        Update an environment (dev/test/live). Most commonly used.
  db            Sync the database from a source to a destination.
  files         Sync the files from a source to a destination.
  pull          Update the code in an environment.

Arguments:
  ENVIRONMENT   An environment: 'dev', 'test' or 'live'.
  SOURCE        An environment: 'dev', 'test' or 'live'.
  DESTINATION   An environment: 'dev', 'test' or 'live'.
  BRANCH        The branch to use, defaults to 'master'.

"
  exit 1
}

# Error checking for db and files commands.
function check_src_dest {
  SRC=$1
  DEST=$2

  if [ -z "$SRC" ]; then
    echo "ERROR: Source environment required."
    help
  fi
  if [ -z "$DEST" ]; then
    echo "ERROR: Destination environment required."
    help
  fi

  check_env_type $SRC
  check_env_type $DEST
}

# Error checking for pull and update commands.
function check_env {
  ENV=$1

  if [ -z "$ENV" ]; then
    echo "ERROR: Environment required."
    help
  fi

  check_env_type $ENV
}

# Error checking to detect valid environment types.
function check_env_type {
  ENV=$1

  if [ "$ENV" = "dev" ] || [ "$ENV" = "test" ] || [ "$ENV" = "live" ]; then
    # If environment is dev/test/live return cleanly
    return 0
  fi
  # Otherwise fail
  echo "ERROR: Environment of type dev/test/live required."
  help
}

function confirm_command {
  if [ $AUTOCONFIRM == 0 ]; then
    echo " (y/n)? y"
  else
    read -p " (y/n)? " ANSWER
    if [ ${ANSWER} != "y" ]; then
      exit 1
    fi
  fi
}

# Database sync command
function command_db {
  SRC=$1
  DEST=$2
  check_src_dest $SRC $DEST
  echo -n "Updating the database: $SRC -> $DEST"
  confirm_command

  # Determine which db is src and dest
  case "$SRC" in
    dev)
      MYSQL_DB_SRC=$MYSQL_DB_DEV
      MYSQL_USER_SRC=$MYSQL_USER_DEV
      MYSQL_PASS_SRC=$MYSQL_PASS_DEV
    ;;
    test)
      MYSQL_DB_SRC=$MYSQL_DB_TEST
      MYSQL_USER_SRC=$MYSQL_USER_TEST
      MYSQL_PASS_SRC=$MYSQL_PASS_TEST
    ;;
    live)
      MYSQL_DB_SRC=$MYSQL_DB_LIVE
      MYSQL_USER_SRC=$MYSQL_USER_LIVE
      MYSQL_PASS_SRC=$MYSQL_PASS_LIVE
    ;;
  esac
  case "$DEST" in
    dev)
      MYSQL_DB_DEST=$MYSQL_DB_DEV
      MYSQL_USER_DEST=$MYSQL_USER_DEV
      MYSQL_PASS_DEST=$MYSQL_PASS_DEV
    ;;
    test)
      MYSQL_DB_DEST=$MYSQL_DB_TEST
      MYSQL_USER_DEST=$MYSQL_USER_TEST
      MYSQL_PASS_DEST=$MYSQL_PASS_TEST
    ;;
    live)
      MYSQL_DB_DEST=$MYSQL_DB_LIVE
      MYSQL_USER_DEST=$MYSQL_USER_LIVE
      MYSQL_PASS_DEST=$MYSQL_PASS_LIVE
    ;;
  esac

  # Be nice to CPU and I/O
  nice -n 10 ionice -c2 -n7 /usr/bin/mysqldump --host=$MYSQL_HOST --user=$MYSQL_USER_SRC --password=$MYSQL_PASS_SRC $MYSQL_DB_SRC \
  | pv | nice -n 10 ionice -c2 -n7 /usr/bin/mysql --host=$MYSQL_HOST --user=$MYSQL_USER_DEST --password=$MYSQL_PASS_DEST $MYSQL_DB_DEST
}

# File sync command
function command_files {
  SRC=$1
  DEST=$2
  check_src_dest $SRC $DEST
  echo -n "Updating the public files directory: $SRC -> $DEST"
  confirm_command


  if [ -d $WWW_DIR/$PROJECT_NAME/$SRC/$PROJECT_FILES ]; then
    sudo -u www-data rsync -vart --delete $WWW_DIR/$PROJECT_NAME/$SRC/$PROJECT_FILES/ $WWW_DIR/$PROJECT_NAME/$DEST/$PROJECT_FILES
  else
    echo "NOTICE: Public files directory $WWW_DIR/$PROJECT_NAME/$SRC/$PROJECT_FILES does not exist."
  fi

}

# Code pull command
function command_pull {
  ENV=$1
  BRANCH=$2
  check_env $ENV
  echo -n "Updating the $ENV code using the $BRANCH branch"
  confirm_command

  # If branch is not set, set to the default
  if [ -z "$BRANCH" ]; then
    BRANCH=master
  fi

  # Determine which domain to run against.
  case "$ENV" in
    dev)
      DOMAIN=$DOMAIN_DEV
    ;;
    test)
      DOMAIN=$DOMAIN_TEST
    ;;
    live)
      DOMAIN=$DOMAIN_LIVE
    ;;
  esac


  sudo -u git git --work-tree=$WWW_DIR/$PROJECT_NAME/$ENV --git-dir=$WWW_DIR/$PROJECT_NAME/$ENV/.git/ pull origin $BRANCH

  echo "Running the Drupal database update script on $ENV"
  sudo -u www-data drush -l http://$DOMAIN -r $WWW_DIR/$PROJECT_NAME/$ENV -y updatedb
}

# Primary workflow update commands.
function command_update {
  ENV=$1
  check_env $ENV

  case "$ENV" in
    dev)
      echo "Updating the development environment"
      command_db live dev
      command_files live dev
    ;;
    test)
      echo "Updating the testing environment"
      command_db live test
      command_files live test
      command_pull test
    ;;
    live)
      echo "Updating the live environment"
      command_pull live
    ;;
  esac
}

# Main script start

if [ ! -f $HOME/.gdw/gdw.conf ]; then
  echo "gdw.conf not found. Are you sure this is the correct user?"
  exit 1
fi

# Load the project specific settings
. $HOME/.gdw/gdw.conf

# Set argument defaults
AUTOCONFIRM=1

# Check for command line arguments
while getopts y OPT; do
  case $OPT in
    y)AUTOCONFIRM=0;;
    *)echo "Invalid argument: $OPT";;
  esac
done

# Clean up the arguments
shift $(($OPTIND - 1))

# Check for a command
COMMAND=$1
if [ -z "$COMMAND" ]; then
  echo "Command required."
  help
fi

# Call the funtion for the specified command
case "$COMMAND" in
  update)
    command_update $2
  ;;
  db)
    command_db $2 $3
  ;;
  files)
    command_files $2 $3
  ;;
  pull)
    command_pull $2
  ;;
esac

echo Done.
