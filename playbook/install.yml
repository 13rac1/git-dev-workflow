##
# Ansible playbook for setting up a Git Drupal Development Workflow on an
# Ubuntu 12.04 server.
# Copyright (C) 2013 by Brad Erickson
#

---
- hosts: all
  gather_facts: yes

  vars:
    www_dir: '/var/www'
    git_dir: '/var/git'

  vars_files:
    - settings.yml

  tasks:
    ##
    # Installation of required software.
    #
    - name: Install | Install required packages.
      apt: pkg=$item state=installed
      with_items:
        - apache2
        - libapache2-mod-php5
        - mysql-server
        - php5-mysql
        - php5-gd
        - php5-dev
        - php5-curl
        - php-apc
        - php5-mcrypt
        - php5-xmlrpc
        - php-soap
        - memcached
        - php5-memcache
        - make
        - unzip
        - curl
        - makepasswd
        - ufw

    ##
    # Setup irrelevant system colors
    #
    - include: tasks/colors.yml

    ##
    # Setup user accounts for git and the project owner.
    #
    - name: Users | Generate password for git/project user
      # creates is not technically true, but works.
      shell: makepasswd --chars=20 creates=$git_dir/.ssh/id_rsa
      register: make_password

    - name: Users | Create git user
      user: name=git createhome=yes home=$git_dir generate_ssh_key=yes shell=/bin/bash password=${make_password.stdout}

    - name: Users | Create project_name user
      user: name=${project_name} createhome=yes home=/home/${project_name} generate_ssh_key=yes shell=/bin/bash password=${make_password.stdout}

    - name: Users | Generate SSH Key for root
      command: ssh-keygen -b 4096 -t rsa -f /root/.ssh/id_rsa -P "" creates=/root/.ssh/id_rsa

      # https://github.com/ansible/ansible/issues/1665 sudo_user doesn't work with variables in 1.0.
    - name: Users | Remove localhost from project_name user known_hosts, if it exists
      shell: su - ${project_name} -c "ssh-keygen -R localhost"
      ignore_errors: yes      
      #sudo_user: ${project_name}
      #sudo: yes

    - name: Users | Add localhost to project_name known_hosts
      shell: su - ${project_name} -c "ssh-keyscan -t rsa localhost >> /home/${project_name}/.ssh/known_hosts"
      #sudo_user: ${project_name}
      #sudo: yes

    - name: Users | Remove localhost from git user known_hosts, if it exists
      shell: su - git -c "ssh-keygen -R localhost"
      ignore_errors: yes      

    - name: Users | Add localhost to git known_hosts
      shell: su - git -c "ssh-keyscan -t rsa localhost >> ${git_dir}/.ssh/known_hosts"

    - name: Users | Remove localhost from root known_hosts, if it exists
      ignore_errors: yes
      shell: ssh-keygen -R localhost

    - name: Users | Add localhost to root known_hosts
      shell: ssh-keyscan -t rsa localhost >> /root/.ssh/known_hosts

    - name: Users | Setup project_name user sudo as git/www-data
      template: src=templates/etc-sudoers.d-project.j2 dest=/etc/sudoers.d/${project_name} mode=0440

    - name: Users | Create symbolic link to www files
      # Ansible 1.0 will change the ownership of the src, and not the link.
      #file: path=/home/${project_name}/www src=${www_dir}/${project_name} state=link owner=${project_name} group=${project_name}
      shell: su - ${project_name} -c "ln -s ${www_dir}/${project_name} www" creates=/home/${project_name}/www

    ##
    # Configure git for root user
    #
    - name: git | Set username
      shell: git config --global user.name "${project_name} root"

    - name: git | Set email
      shell: git config --global user.email "root@${project_domain_live}"

    ##
    # Gitolite install
    #
    - include: tasks/gitolite.yml

    ##
    # Setup Environments
    #
    - include: tasks/environments.yml

    ##
    # Configure Apache
    #
    - include: tasks/apache.yml

    ##
    # Configure PHP
    #
    - name: PHP | PHP configuration file for Apache2
      template: src=templates/etc-php5-apache2-php.ini.j2 dest=/etc/php5/apache2/php.ini backup=yes
    - name: PHP | Configure APC
      template: src=templates/etc-php5-conf.d-apc.ini.j2 dest=/etc/php5/conf.d/apc.ini backup=yes

    ##
    # Configure sshd
    #
    - name: sshd | Install /etc/ssh/sshd_config 
      copy: src=files/etc-ssh-sshd_config dest=/etc/ssh/sshd_config backup=yes

    ##
    # Configure the ufw firewall
    #
    - name: ufw | Allow SSH
      command: ufw allow 22

    - name: ufw | Allow HTTP
      command: ufw allow 80

    - name: ufw | Enable
      command: ufw enable

    ##
    # Drush install, a Drupal shell tool.
    #
    - include: tasks/drush.yml

    ##
    # Create safe project name for MySQL
    - name: Generate safe MySQL database name.
      shell: echo ${project_name} | cut -c1-11 | sed "s/-/_/g"
      register: mysql_safe

    ##
    # Configure MySQL, needs $mysql_safe
    #
    - include: tasks/mysql.yml

    ##
    # Script install, needs $mysql_safe
    #
    - include: tasks/scripts.yml

    ##
    # Restart/Reload all modified services
    #
    - name: Reload | Reload ssh
      service: name=ssh state=reloaded
    - name: Reload | Reload Apache
      service: name=apache2 state=reloaded
